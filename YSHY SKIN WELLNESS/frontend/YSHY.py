import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
# The camera feature will require this, we will implement it next
# import cv2
import os # For saving the captured image
import mysql.connector # --- Import MySQL Connector ---
from mysql.connector import Error # --- For error handling ---

# --------------------------------------------------
# PHASE 1: INTERNATIONALIZATION (i18n) & TRANSLATIONS
# --------------------------------------------------

LANGUAGES = {
    'en': {
        'app_title': 'Yshy - Skin Analyzer',
        'search_btn': 'üîç  Search',
        'take_photo_btn': 'Take Photo',
        'gallery_btn': 'Choose from Gallery',
        'privacy_btn': 'Privacy',
        'view_appointment_btn': 'View Appointment', # New Button
        'back_btn': '< Back',
        'create_appointment_btn': 'Create Appointment',
        'find_dermatologist_btn': 'Find Dermatologist',
        'scan_title': 'Possible Condition: Psoriasis',
        'scan_confidence': 'Confidence: 54%',
        'scan_image_placeholder': '[ Uploaded Image ]',
        'scan_image_error': '[ Error Loading Image ]',
        'scan_disclaimer': 'This is not a medical diagnosis. Consult a dermatologist for a professional opinion.',
        'scan_treatment_title': 'Treatment Suggestions',
        'scan_treatment_body': ('‚Ä¢ Moisturize thick plaques daily\n'
                                '‚Ä¢ Moderate sun exposure (with sunscreen)\n'
                                '‚Ä¢ Avoid smoking and excess alcohol'),
        'scan_food_title': 'Recommended Foods',
        'scan_food_body': ('‚Ä¢ Anti-inflammatory foods (turmeric, leafy greens)\n'
                           '‚Ä¢ Lean proteins and whole grains'),
        'scan_otc_title': 'OTC Medicines',
        'scan_otc_body': '‚Ä¢ Coal tar shampoo for scalp\n‚Ä¢ Salicylic acid ointment',
        'appointment_title': 'Create Appointment',
        'form_name': 'Name:',
        'form_age': 'Age:',
        'form_phone': 'Phone:',
        'form_blood': 'Blood Group:',
        'form_doctor': 'Doctor:',
        'form_submit_btn': 'Submit Report',
        'form_print_btn': 'Print Report',
        'form_success_msg': 'Report Submitted!',
        'form_err_all_fields': 'All fields are required.',
        'form_err_age_number': 'Age must be a number.',
        'form_err_phone_invalid': 'Please enter a valid phone number.',
        'form_success_title': 'Success',
        'form_success_body': 'Report Submitted Successfully!',
        'form_print_err_no_report': 'No report to print. Please submit first.',
        'form_print_err_fail': 'Failed to save report: {e}',
        'form_print_success_body': 'Report saved successfully to:\n{filepath}',
        'db_connection_error': 'Database Connection Error:\n{e}', # DB Error Message
        'db_insert_error': 'Database Insert Error:\n{e}', # DB Error Message
        'db_query_error': 'Database Query Error:\n{e}', # DB Error Message
        'disclaimer_title': '‚ö†Ô∏è DISCLAIMER',
        'disclaimer_body': (
            "The information, results, and recommendations provided through the YSHY App are "
            "based on professional medical consultations and verified by qualified healthcare practitioners. "
            "However, the content and results available on this app are intended for informational and guidance "
            "purposes only and should not replace personalized medical advice, diagnosis, or treatment from your "
            "own healthcare provider.\n\nAll images, personal data, and health-related information you share "
            "through the app are handled with strict confidentiality and secured using advanced data protection "
            "measures. Your data will never be shared, sold, or misused under any circumstances.\n\nBy using the "
            "YSHY App, you acknowledge and agree that the app and its developers are not liable for any decisions "
            "made based on the information provided within the app. Always consult your doctor for any medical "
            "concerns or before making changes to your treatment plan."
            "\n\n--- Privacy Policy ---\n"
            "1. Data Collection: We collect only the images you provide and the results generated.\n"
            "2. Data Usage: Data is used solely to provide and improve the analysis service.\n"
            "3. Data Storage: All data is encrypted at rest and in transit.\n"
            "4. Data Sharing: We do not share your personal data with any third parties.\n"
            "5. User Rights: You may request the deletion of your data at any time."
            "\n\n--- Terms of Service ---\n"
            "By using this app, you agree to the disclaimer above. You agree not to hold the app creators liable "
            "for any medical outcomes. This app is not a substitute for a qualified dermatologist. "
            "Use of this app is at your own risk. The service is provided 'as is' without any warranties."
        ),
        'dermo_title': 'Find Dermatologist',
        'dermo_pincode_label': 'Enter your Pincode:',
        'dermo_search_btn': 'Search',
        'dermo_err_pincode': 'Please enter a valid 6-digit pincode.',
        'dermo_results_title': 'Clinics Near "{pincode}"',
        'dermo_clinic1_name': 'Dr. Gupta\'s Skin Clinic',
        'dermo_clinic1_desc': '123, Main Street - 5km away',
        'dermo_clinic2_name': 'Agarwal Derma Care',
        'dermo_clinic2_desc': '45, Old Road - 8km away',
        'dermo_clinic3_name': 'Sharma Skin Care', # New Clinic
        'dermo_clinic3_desc': '78, Park Avenue - 10km away', # New Clinic
        'dermo_clinic4_name': 'Modern Dermatology', # New Clinic
        'dermo_clinic4_desc': 'Block C, Tech Park - 12km away', # New Clinic
        'view_appt_title': 'View Your Appointment', # New Screen Title
        'view_appt_name_label': 'Enter Name:', # New Screen Label
        'view_appt_find_btn': 'Find Appointment', # New Screen Button
        'view_appt_not_found': 'No appointment found for "{name}".', # New Screen Message
        # Updated to show more details from DB
        'view_appt_found': 'Appointment for {name}:\nAge: {age}\nPhone: {phone}\nBlood Group: {blood}\nDoctor: {doctor}',
    },
    'hi': {
        'app_title': 'Yshy - ‡§∏‡•ç‡§ï‡§ø‡§® ‡§è‡§®‡§æ‡§≤‡§æ‡§á‡§ú‡§∞',
        'search_btn': 'üîç  ‡§ñ‡•ã‡§ú‡•á‡§Ç',
        'take_photo_btn': '‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§≤‡•á‡§Ç',
        'gallery_btn': '‡§ó‡•à‡§≤‡§∞‡•Ä ‡§∏‡•á ‡§ö‡•Å‡§®‡•á‡§Ç',
        'privacy_btn': '‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ',
        'view_appointment_btn': '‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¶‡•á‡§ñ‡•á‡§Ç', # New Button
        'back_btn': '< ‡§µ‡§æ‡§™‡§∏',
        'create_appointment_btn': '‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç',
        'find_dermatologist_btn': '‡§§‡•ç‡§µ‡§ö‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ñ‡•ã‡§ú‡•á‡§Ç',
        'scan_title': '‡§∏‡§Ç‡§≠‡§æ‡§µ‡§ø‡§§ ‡§∏‡•ç‡§•‡§ø‡§§‡§ø: ‡§∏‡•ã‡§∞‡§æ‡§Ø‡§∏‡§ø‡§∏',
        'scan_confidence': '‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏: 54%',
        'scan_image_placeholder': '[ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à ‡§õ‡§µ‡§ø ]',
        'scan_image_error': '[ ‡§õ‡§µ‡§ø ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ]',
        'scan_disclaimer': '‡§Ø‡§π ‡§è‡§ï ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§®‡§ø‡§¶‡§æ‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∞‡§æ‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•ç‡§µ‡§ö‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§',
        'scan_treatment_title': '‡§â‡§™‡§ö‡§æ‡§∞ ‡§ï‡•á ‡§∏‡•Å‡§ù‡§æ‡§µ',
        'scan_treatment_body': ('‚Ä¢ ‡§Æ‡•ã‡§ü‡•Ä ‡§™‡§ü‡•ç‡§ü‡§ø‡§ï‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡§§‡§ø‡§¶‡§ø‡§® ‡§Æ‡•â‡§á‡§∏‡•ç‡§ö‡§∞‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç\n'
                                '‚Ä¢ ‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§ß‡•Ç‡§™ (‡§∏‡§®‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§ï‡•á ‡§∏‡§æ‡§•)\n'
                                '‚Ä¢ ‡§ß‡•Ç‡§Æ‡•ç‡§∞‡§™‡§æ‡§® ‡§î‡§∞ ‡§Ö‡§§‡•ç‡§Ø‡§ß‡§ø‡§ï ‡§∂‡§∞‡§æ‡§¨ ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç'),
        'scan_food_title': '‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§™‡§¶‡§æ‡§∞‡•ç‡§•',
        'scan_food_body': ('‚Ä¢ ‡§∏‡•Ç‡§ú‡§®-‡§∞‡•ã‡§ß‡•Ä ‡§ñ‡§æ‡§¶‡•ç‡§Ø ‡§™‡§¶‡§æ‡§∞‡•ç‡§• (‡§π‡§≤‡•ç‡§¶‡•Ä, ‡§™‡§§‡•ç‡§§‡•á‡§¶‡§æ‡§∞ ‡§∏‡§æ‡§ó)\n'
                           '‚Ä¢ ‡§≤‡•Ä‡§® ‡§™‡•ç‡§∞‡•ã‡§ü‡•Ä‡§® ‡§î‡§∞ ‡§∏‡§æ‡§¨‡•Å‡§§ ‡§Ö‡§®‡§æ‡§ú'),
        'scan_otc_title': '‡§ì‡§ü‡•Ä‡§∏‡•Ä ‡§¶‡§µ‡§æ‡§è‡§Ç',
        'scan_otc_body': '‚Ä¢ ‡§∏‡•ç‡§ï‡•à‡§≤‡•ç‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§≤ ‡§ü‡§æ‡§∞ ‡§∂‡•à‡§Æ‡•ç‡§™‡•Ç\n‚Ä¢ ‡§∏‡•à‡§≤‡§ø‡§∏‡§ø‡§≤‡§ø‡§ï ‡§è‡§∏‡§ø‡§° ‡§Æ‡§∞‡§π‡§Æ',
        'appointment_title': '‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡§®‡§æ‡§è‡§Ç',
        'form_name': '‡§®‡§æ‡§Æ:',
        'form_age': '‡§â‡§Æ‡•ç‡§∞:',
        'form_phone': '‡§´‡§º‡•ã‡§®:',
        'form_blood': '‡§¨‡•ç‡§≤‡§° ‡§ó‡•ç‡§∞‡•Å‡§™:',
        'form_doctor': '‡§°‡•â‡§ï‡•ç‡§ü‡§∞:',
        'form_submit_btn': '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç',
        'form_print_btn': '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§ï‡§∞‡•á‡§Ç',
        'form_success_msg': '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ú‡§Æ‡§æ ‡§π‡•ã ‡§ó‡§à!',
        'form_err_all_fields': '‡§∏‡§≠‡•Ä ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡§Ç‡•§',
        'form_err_age_number': '‡§â‡§Æ‡•ç‡§∞ ‡§è‡§ï ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ ‡§π‡•ã‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è‡•§',
        'form_err_phone_invalid': '‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§',
        'form_success_title': '‡§∏‡§´‡§≤‡§§‡§æ',
        'form_success_body': '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ú‡§Æ‡§æ ‡§ï‡•Ä ‡§ó‡§à!',
        'form_print_err_no_report': '‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç‡•§',
        'form_print_err_fail': '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§π‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤: {e}',
        'form_print_success_body': '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ø‡§π‡§æ‡§Å ‡§∏‡§π‡•á‡§ú‡•Ä ‡§ó‡§à:\n{filepath}',
        'db_connection_error': '‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:\n{e}', # DB Error Message
        'db_insert_error': '‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§™‡•ç‡§∞‡§µ‡§ø‡§∑‡•ç‡§ü‡§ø ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:\n{e}', # DB Error Message
        'db_query_error': '‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø:\n{e}', # DB Error Message
        'disclaimer_title': '‚ö†Ô∏è ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£',
        'disclaimer_body': (
            "YSHY ‡§ê‡§™ ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡•Ä ‡§ó‡§à ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä, ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§î‡§∞ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂‡•á‡§Ç "
            "‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§™‡§∞‡§æ‡§Æ‡§∞‡•ç‡§∂ ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï‡•ã‡§Ç ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§π‡•à‡§Ç‡•§ "
            "‡§π‡§æ‡§≤‡§æ‡§Ç‡§ï‡§ø, ‡§á‡§∏ ‡§ê‡§™ ‡§™‡§∞ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§î‡§∞ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§ï‡•á‡§µ‡§≤ ‡§∏‡•Ç‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§î‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® "
            "‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§á‡§®‡•ç‡§π‡•á‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§§‡§æ ‡§∏‡•á ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§≤‡§æ‡§π, "
            "‡§®‡§ø‡§¶‡§æ‡§® ‡§Ø‡§æ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§ï‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§®‡§π‡•Ä‡§Ç ‡§≤‡•á‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è‡•§\n\n‡§Ü‡§™‡§ï‡•á ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ê‡§™ ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á ‡§∏‡§æ‡§ù‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§∏‡§≠‡•Ä ‡§õ‡§µ‡§ø‡§Ø‡§æ‡§Ç, "
            "‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§°‡•á‡§ü‡§æ ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•ã ‡§∏‡§ñ‡•ç‡§§ ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Ç‡§≠‡§æ‡§≤‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§â‡§®‡•ç‡§®‡§§ ‡§°‡•á‡§ü‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ "
            "‡§â‡§™‡§æ‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§ ‡§Ü‡§™‡§ï‡§æ ‡§°‡•á‡§ü‡§æ ‡§ï‡§≠‡•Ä ‡§≠‡•Ä ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§™‡§∞‡§ø‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Æ‡•á‡§Ç ‡§∏‡§æ‡§ù‡§æ, ‡§¨‡•á‡§ö‡§æ ‡§Ø‡§æ "
            "‡§¶‡•Å‡§∞‡•Å‡§™‡§Ø‡•ã‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§\n\nYSHY ‡§ê‡§™ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á, ‡§Ü‡§™ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§∏‡§π‡§Æ‡§§ ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§ê‡§™ "
            "‡§î‡§∞ ‡§á‡§∏‡§ï‡•á ‡§°‡•á‡§µ‡§≤‡§™‡§∞‡•ç‡§∏ ‡§ê‡§™ ‡§ï‡•á ‡§≠‡•Ä‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡•Ä ‡§ó‡§à ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§≤‡§ø‡§è ‡§ó‡§è ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§®‡§ø‡§∞‡•ç‡§£‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§§‡•ç‡§§‡§∞‡§¶‡§æ‡§Ø‡•Ä "
            "‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç‡•§ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§â‡§™‡§ö‡§æ‡§∞ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§π‡§Æ‡•á‡§∂‡§æ "
            "‡§Ö‡§™‡§®‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§"
            "\n\n--- ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§®‡•Ä‡§§‡§ø ---\n"
            "1. ‡§°‡•á‡§ü‡§æ ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π: ‡§π‡§Æ ‡§ï‡•á‡§µ‡§≤ ‡§Ü‡§™‡§ï‡•á ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡•Ä ‡§ó‡§à ‡§õ‡§µ‡§ø‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ‡•ã‡§Ç ‡§ï‡•ã ‡§è‡§ï‡§§‡•ç‡§∞ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§\n"
            "2. ‡§°‡•á‡§ü‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó: ‡§°‡•á‡§ü‡§æ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡•á‡§µ‡§≤ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§∏‡•á‡§µ‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§î‡§∞ ‡§∏‡•Å‡§ß‡§æ‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§\n"
            "3. ‡§°‡•á‡§ü‡§æ ‡§≠‡§Ç‡§°‡§æ‡§∞‡§£: ‡§∏‡§≠‡•Ä ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§Ü‡§∞‡§æ‡§Æ ‡§î‡§∞ ‡§™‡§æ‡§∞‡§ó‡§Æ‡§® ‡§Æ‡•á‡§Ç ‡§è‡§®‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§\n"
            "4. ‡§°‡•á‡§ü‡§æ ‡§∏‡§æ‡§ù‡§æ‡§ï‡§∞‡§£: ‡§π‡§Æ ‡§Ü‡§™‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§°‡•á‡§ü‡§æ ‡§ï‡§ø‡§∏‡•Ä ‡§§‡•Ä‡§∏‡§∞‡•á ‡§™‡§ï‡•ç‡§∑ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§æ‡§ù‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§\n"
            "5. ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡•á ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞: ‡§Ü‡§™ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§∏‡§Æ‡§Ø ‡§Ö‡§™‡§®‡•á ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã ‡§π‡§ü‡§æ‡§®‡•á ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§"
            "\n\n--- ‡§∏‡•á‡§µ‡§æ ‡§ï‡•Ä ‡§∂‡§∞‡•ç‡§§‡•á‡§Ç ---\n"
            "‡§á‡§∏ ‡§ê‡§™ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á, ‡§Ü‡§™ ‡§â‡§™‡§∞‡•ã‡§ï‡•ç‡§§ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£ ‡§∏‡•á ‡§∏‡§π‡§Æ‡§§ ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§ê‡§™ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§§‡§æ‡§ì‡§Ç ‡§ï‡•ã ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä "
            "‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§§‡•ç‡§§‡§∞‡§¶‡§æ‡§Ø‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§†‡§π‡§∞‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡§Æ‡§§ ‡§π‡•à‡§Ç‡•§ ‡§Ø‡§π ‡§ê‡§™ ‡§è‡§ï ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§§‡•ç‡§µ‡§ö‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û "
            "‡§ï‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§á‡§∏ ‡§ê‡§™ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§Ü‡§™‡§ï‡•á ‡§Ö‡§™‡§®‡•á ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§™‡§∞ ‡§π‡•à‡•§ ‡§∏‡•á‡§µ‡§æ '‡§ú‡•à‡§∏‡§æ ‡§π‡•à' ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ "
            "‡§¨‡§ø‡§®‡§æ ‡§ï‡§ø‡§∏‡•Ä ‡§µ‡§æ‡§∞‡§Ç‡§ü‡•Ä ‡§ï‡•á ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡•Ä ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§"
        ),
        'dermo_title': '‡§§‡•ç‡§µ‡§ö‡§æ ‡§µ‡§ø‡§∂‡•á‡§∑‡§ú‡•ç‡§û ‡§ñ‡•ã‡§ú‡•á‡§Ç',
        'dermo_pincode_label': '‡§Ö‡§™‡§®‡§æ ‡§™‡§ø‡§®‡§ï‡•ã‡§° ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç:',
        'dermo_search_btn': '‡§ñ‡•ã‡§ú‡•á‡§Ç',
        'dermo_err_pincode': '‡§ï‡•É‡§™‡§Ø‡§æ 6 ‡§Ö‡§Ç‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡•à‡§ß ‡§™‡§ø‡§®‡§ï‡•ã‡§° ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§',
        'dermo_results_title': '"{pincode}" ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§ï‡•á ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï',
        'dermo_clinic1_name': '‡§°‡•â. ‡§ó‡•Å‡§™‡•ç‡§§‡§æ ‡§ï‡•Ä ‡§§‡•ç‡§µ‡§ö‡§æ ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï',
        'dermo_clinic1_desc': '123, ‡§Æ‡•á‡§® ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§ü - 5 ‡§ï‡§ø‡§Æ‡•Ä ‡§¶‡•Ç‡§∞',
        'dermo_clinic2_name': '‡§Ö‡§ó‡•ç‡§∞‡§µ‡§æ‡§≤ ‡§°‡§∞‡•ç‡§Æ‡§æ ‡§ï‡•á‡§Ø‡§∞',
        'dermo_clinic2_desc': '45, ‡§ì‡§≤‡•ç‡§° ‡§∞‡•ã‡§° - 8 ‡§ï‡§ø‡§Æ‡•Ä ‡§¶‡•Ç‡§∞',
        'dermo_clinic3_name': '‡§∂‡§∞‡•ç‡§Æ‡§æ ‡§∏‡•ç‡§ï‡§ø‡§® ‡§ï‡•á‡§Ø‡§∞', # New Clinic
        'dermo_clinic3_desc': '78, ‡§™‡§æ‡§∞‡•ç‡§ï ‡§è‡§µ‡•á‡§®‡•ç‡§Ø‡•Ç - 10 ‡§ï‡§ø‡§Æ‡•Ä ‡§¶‡•Ç‡§∞', # New Clinic
        'dermo_clinic4_name': '‡§Æ‡•â‡§°‡§∞‡•ç‡§® ‡§°‡§∞‡•ç‡§Æ‡•á‡§ü‡•ã‡§≤‡•â‡§ú‡•Ä', # New Clinic
        'dermo_clinic4_desc': '‡§¨‡•ç‡§≤‡•â‡§ï ‡§∏‡•Ä, ‡§ü‡•á‡§ï ‡§™‡§æ‡§∞‡•ç‡§ï - 12 ‡§ï‡§ø‡§Æ‡•Ä ‡§¶‡•Ç‡§∞', # New Clinic
        'view_appt_title': '‡§Ö‡§™‡§®‡§æ ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¶‡•á‡§ñ‡•á‡§Ç', # New Screen Title
        'view_appt_name_label': '‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç:', # New Screen Label
        'view_appt_find_btn': '‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§ñ‡•ã‡§ú‡•á‡§Ç', # New Screen Button
        'view_appt_not_found': '"{name}" ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§', # New Screen Message
        # Updated to show more details from DB
        'view_appt_found': '{name} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü:\n‡§â‡§Æ‡•ç‡§∞: {age}\n‡§´‡§º‡•ã‡§®: {phone}\n‡§¨‡•ç‡§≤‡§° ‡§ó‡•ç‡§∞‡•Å‡§™: {blood}\n‡§°‡•â‡§ï‡•ç‡§ü‡§∞: {doctor}',
    },
    'ta': {
        'app_title': 'Yshy - ‡Æ§‡Øã‡Æ≤‡Øç ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡Æø',
        'search_btn': 'üîç  ‡Æ§‡Øá‡Æü‡ØÅ',
        'take_photo_btn': '‡Æ™‡ØÅ‡Æï‡Øà‡Æ™‡Øç‡Æ™‡Æü‡ÆÆ‡Øç ‡Æé‡Æü‡ØÅ',
        'gallery_btn': '‡Æï‡Øá‡Æ≤‡Æ∞‡Æø‡ÆØ‡Æø‡Æ≤‡Øç ‡Æá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ',
        'privacy_btn': '‡Æ§‡Æ©‡Æø‡ÆØ‡ØÅ‡Æ∞‡Æø‡ÆÆ‡Øà',
        'view_appointment_btn': '‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Øà‡Æï‡Øç ‡Æï‡Ææ‡Æ£‡Øç‡Æï', # New Button
        'back_btn': '< ‡Æ™‡Æø‡Æ©‡Øç‡Æö‡ØÜ‡Æ≤‡Øç',
        'create_appointment_btn': '‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Øà ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡ØÅ',
        'find_dermatologist_btn': '‡Æ§‡Øã‡Æ≤‡Øç ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æü‡ØÅ',
        'scan_title': '‡Æö‡Ææ‡Æ§‡Øç‡Æ§‡Æø‡ÆØ‡ÆÆ‡Ææ‡Æ© ‡Æ®‡Æø‡Æ≤‡Øà: ‡Æö‡Øä‡Æ∞‡Æø‡ÆØ‡Ææ‡Æö‡Æø‡Æ∏‡Øç',
        'scan_confidence': '‡Æ®‡ÆÆ‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Øà: 54%',
        'scan_image_placeholder': '[ ‡Æ™‡Æ§‡Æø‡Æµ‡Øá‡Æ±‡Øç‡Æ±‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ™‡Æü‡ÆÆ‡Øç ]',
        'scan_image_error': '[ ‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Øà ‡Æè‡Æ±‡Øç‡Æ±‡ØÅ‡Æµ‡Æ§‡Æø‡Æ≤‡Øç ‡Æ™‡Æø‡Æ¥‡Øà ]',
        'scan_disclaimer': '‡Æá‡Æ§‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡§®‡§ø‡§¶‡§æ‡§®‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤. ‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà ‡Æï‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æ§‡Øã‡Æ≤‡Øç ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øà ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.',
        'scan_treatment_title': '‡Æö‡Æø‡Æï‡Æø‡Æö‡Øç‡Æö‡Øà ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà‡Æï‡Æ≥‡Øç',
        'scan_treatment_body': ('‚Ä¢ ‡Æ§‡Æü‡Æø‡ÆÆ‡Æ©‡Ææ‡Æ© ‡Æ™‡Æø‡Æ≥‡Øá‡Æï‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Øà ‡Æ§‡Æø‡Æ©‡ÆÆ‡ØÅ‡ÆÆ‡Øç ‡Æà‡Æ∞‡Æ™‡Øç‡Æ™‡Æ§‡ÆÆ‡Ææ‡Æï‡Øç‡Æï‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç\n'
                                '‚Ä¢ ‡ÆÆ‡Æø‡Æ§‡ÆÆ‡Ææ‡Æ© ‡Æö‡ØÇ‡Æ∞‡Æø‡ÆØ ‡Æí‡Æ≥‡Æø (‡Æö‡Æ©‡Øç‡Æ∏‡Øç‡Æï‡Æø‡Æ∞‡ØÄ‡Æ©‡ØÅ‡Æü‡Æ©‡Øç)\n'
                                '‚Ä¢ ‡Æ™‡ØÅ‡Æï‡Øà‡Æ™‡Æø‡Æü‡Æø‡Æ§‡Øç‡Æ§‡Æ≤‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ§‡Æø‡Æï ‡ÆÆ‡Æ§‡ØÅ ‡ÆÖ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æµ‡Æ§‡Øà‡Æ§‡Øç ‡Æ§‡Æµ‡Æø‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç'),
        'scan_food_title': '‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æâ‡Æ£‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç',
        'scan_food_body': ('‚Ä¢ ‡ÆÖ‡Æ¥‡Æ±‡Øç‡Æö‡Æø ‡Æé‡Æ§‡Æø‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡ØÅ ‡Æâ‡Æ£‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç (‡ÆÆ‡Æû‡Øç‡Æö‡Æ≥‡Øç, ‡Æá‡Æ≤‡Øà ‡Æï‡ØÄ‡Æ∞‡Øà‡Æï‡Æ≥‡Øç)\n'
                           '‚Ä¢ ‡Æí‡Æ≤‡Øç‡Æ≤‡Æø‡ÆØ‡Ææ‡Æ© ‡Æ™‡ØÅ‡Æ∞‡Æ§‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æ¥‡ØÅ ‡Æ§‡Ææ‡Æ©‡Æø‡ÆØ‡Æô‡Øç‡Æï‡Æ≥‡Øç'),
        'scan_otc_title': 'OTC ‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Æ≥‡Øç',
        'scan_otc_body': '‚Ä¢ ‡Æâ‡Æö‡Øç‡Æö‡Æ®‡Øç‡Æ§‡≤≤‡≥Ü‡Æï‡Øç‡Æï‡ØÅ ‡Æï‡Øã‡Æ≤‡Øç ‡Æü‡Ææ‡Æ∞‡Øç ‡Æ∑‡Ææ‡ÆÆ‡Øç‡Æ™‡ØÅ\n‚Ä¢ ‡Æö‡Ææ‡Æ≤‡Æø‡Æö‡Æø‡Æ≤‡Æø‡Æï‡Øç ‡ÆÖ‡ÆÆ‡Æø‡Æ≤ ‡Æï‡Æ≥‡Æø‡ÆÆ‡Øç‡Æ™‡ØÅ',
        'appointment_title': '‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Øà ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡ØÅ',
        'form_name': '‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç:',
        'form_age': '‡Æµ‡ÆØ‡Æ§‡ØÅ:',
        'form_phone': '‡Æ§‡ØÜ‡Ææ‡Æ≤‡Øà‡Æ™‡Øá‡Æö‡Æø:',
        'form_blood': '‡Æá‡Æ∞‡Æ§‡Øç‡Æ§ ‡Æµ‡Æï‡Øà:',
        'form_doctor': '‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øç:',
        'form_submit_btn': '‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà‡ÆØ‡Øà‡Æö‡Øç ‡Æö‡ÆÆ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Æø',
        'form_print_btn': '‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà‡ÆØ‡Øà ‡ÆÖ‡Æö‡Øç‡Æö‡Æø‡Æü‡ØÅ',
        'form_success_msg': '‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æö‡ÆÆ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ!',
        'form_err_all_fields': '‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ ‡Æ™‡ØÅ‡Æ≤‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Øá‡Æµ‡Øà.',
        'form_err_age_number': '‡Æµ‡ÆØ‡Æ§‡ØÅ ‡Æé‡Æ£‡Øç‡Æ£‡Ææ‡Æï ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï ‡Æµ‡Øá‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç.',
        'form_err_phone_invalid': '‡Æö‡Æ∞‡Æø‡ÆØ‡Ææ‡Æ© ‡Æ§‡ØÜ‡Ææ‡Æ≤‡Øà‡Æ™‡Øá‡Æö‡Æø ‡Æé‡Æ£‡Øç‡Æ£‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç.',
        'form_success_title': '‡Æµ‡ØÜ‡Æ±‡Øç‡Æ±‡Æø',
        'form_success_body': '‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æµ‡ØÜ‡Æ±‡Øç‡Æ±‡Æø‡Æï‡Æ∞‡ÆÆ‡Ææ‡Æï ‡Æö‡ÆÆ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ!',
        'form_print_err_no_report': '‡ÆÖ‡Æö‡Øç‡Æö‡Æø‡Æü ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà. ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡Æø‡Æ≤‡Øç ‡Æö‡ÆÆ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.',
        'form_print_err_fail': '‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà‡ÆØ‡Øà‡Æö‡Øç ‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà: {e}',
        'form_print_success_body': '‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æµ‡ØÜ‡Æ±‡Øç‡Æ±‡Æø‡Æï‡Æ∞‡ÆÆ‡Ææ‡Æï ‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ:\n{filepath}',
        'db_connection_error': '‡Æ§‡Æ∞‡Æµ‡ØÅ‡Æ§‡Øç‡Æ§‡Æ≥ ‡Æá‡Æ£‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æ™‡Øç ‡Æ™‡Æø‡Æ¥‡Øà:\n{e}', # DB Error Message
        'db_insert_error': '‡Æ§‡Æ∞‡Æµ‡ØÅ‡Æ§‡Øç‡Æ§‡Æ≥‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æø‡Æ¥‡Øà:\n{e}', # DB Error Message
        'db_query_error': '‡Æ§‡Æ∞‡Æµ‡ØÅ‡Æ§‡Øç‡Æ§‡Æ≥ ‡Æµ‡Æø‡Æ©‡Æµ‡Æ≤‡Øç ‡Æ™‡Æø‡Æ¥‡Øà:\n{e}', # DB Error Message
        'disclaimer_title': '‚ö†Ô∏è ‡Æ™‡Øä‡Æ±‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ‡Æ§‡Øç ‡Æ§‡ØÅ‡Æ±‡Æ™‡Øç‡Æ™‡ØÅ',
        'disclaimer_body': (
            "YSHY ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø ‡ÆÆ‡ØÇ‡Æ≤‡ÆÆ‡Øç ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç, ‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Æ≥‡Øç "
            "‡Æ§‡Øä‡Æ¥‡Æø‡Æ≤‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà‡Æï‡Æ≥‡Øà ‡ÆÖ‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øà‡ÆØ‡Ææ‡Æï‡Æï‡Øç ‡Æï‡Øä‡Æ£‡Øç‡Æü‡Æµ‡Øà ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Æï‡ØÅ‡Æ§‡Æø‡Æµ‡Ææ‡ÆØ‡Øç‡Æ®‡Øç‡Æ§ ‡Æö‡ØÅ‡Æï‡Ææ‡Æ§‡Ææ‡Æ∞‡Æ™‡Øç "
            "‡Æ™‡Æ£‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç‡Æï‡Æ≥‡Ææ‡Æ≤‡Øç ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æµ‡Øà. ‡Æá‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æ©‡ØÅ‡ÆÆ‡Øç, ‡Æá‡Æ®‡Øç‡Æ§ ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø‡ÆØ‡Æø‡Æ≤‡Øç ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æü‡Æï‡Øç‡Æï‡ÆÆ‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç "
            "‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æ¥‡Æø‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æ§‡Æ≤‡Øç ‡Æ®‡Øã‡Æï‡Øç‡Æï‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æï ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øá ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡Øä‡Æ®‡Øç‡Æ§ "
            "‡Æö‡ØÅ‡Æï‡Ææ‡Æ§‡Ææ‡Æ∞ ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡ØÅ‡Æ®‡Æ∞‡Æø‡Æü‡ÆÆ‡Æø‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æ§‡Æ©‡Æø‡Æ™‡Øç‡Æ™‡ÆØ‡Æ©‡Ææ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡ÆÜ‡Æ≤‡Øã‡Æö‡Æ©‡Øà, ‡§®‡§ø‡§¶‡§æ‡§®‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ "
            "‡Æö‡Æø‡Æï‡Æø‡Æö‡Øç‡Æö‡Øà‡ÆØ‡Øà ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Æï‡Øç‡Æï‡ØÇ‡Æü‡Ææ‡Æ§‡ØÅ.\n\n‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø ‡ÆÆ‡ØÇ‡Æ≤‡ÆÆ‡Øç ‡Æ™‡Æï‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ ‡Æ™‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æ§‡Æ©‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ§‡Æ∞‡Æµ‡ØÅ "
            "‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æü‡Æ≤‡Øç‡Æ®‡Æ≤‡ÆÆ‡Øç ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡Ææ‡Æ© ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Æü‡ØÅ‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æ© ‡Æ∞‡Æï‡Æö‡Æø‡ÆØ‡Æ§‡Øç‡Æ§‡Æ©‡Øç‡ÆÆ‡Øà‡ÆØ‡ØÅ‡Æü‡Æ©‡Øç ‡Æï‡Øà‡ÆØ‡Ææ‡Æ≥‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æï‡Æø‡Æ©‡Øç‡Æ±‡Æ© ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç "
            "‡ÆÆ‡Øá‡ÆÆ‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ®‡Æü‡Æµ‡Æü‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æø ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æï‡Æø‡Æ©‡Øç‡Æ±‡Æ©. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡Æ∞‡Æµ‡ØÅ "
            "‡Æé‡Æ®‡Øç‡Æ§‡Æµ‡Øä‡Æ∞‡ØÅ ‡Æö‡ØÇ‡Æ¥‡Øç‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Æø‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æï‡Æø‡Æ∞‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Øã, ‡Æµ‡Æø‡Æ±‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Øã ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æ§‡Æµ‡Æ±‡Ææ‡Æï‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Øã ‡ÆÆ‡Ææ‡Æü‡Øç‡Æü‡Ææ‡Æ§‡ØÅ.\n\n"
            "YSHY ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø‡ÆØ‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ§‡Æ©‡Øç ‡ÆÆ‡ØÇ‡Æ≤‡ÆÆ‡Øç, ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø‡ÆØ‡Æø‡Æ©‡Øç ‡Æü‡ØÜ‡Æµ‡Æ≤‡Æ™‡Øç‡Æ™‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø‡ÆØ‡Æø‡Æ©‡ØÅ‡Æ≥‡Øç ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡ÆÆ‡Øç "
            "‡Æ§‡Æï‡Æµ‡Æ≤‡Æø‡Æ©‡Øç ‡ÆÖ‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øà‡ÆØ‡Æø‡Æ≤‡Øç ‡Æé‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡ÆÆ‡Øç ‡Æé‡Æ®‡Øç‡Æ§‡Æµ‡Øä‡Æ∞‡ØÅ ‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øä‡Æ±‡ØÅ‡Æ™‡Øç‡Æ™‡Æ≤‡Øç‡Æ≤ ‡Æé‡Æ©‡Øç‡Æ™‡Æ§‡Øà ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç "
            "‡ÆÖ‡Æ±‡Æø‡Æ®‡Øç‡Æ§‡ØÅ ‡Æí‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Øç‡Æï‡Øä‡Æ≥‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç. ‡Æé‡Æ®‡Øç‡Æ§‡Æµ‡Øä‡Æ∞‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡Æï‡Æµ‡Æ≤‡Øà‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡Æø‡Æï‡Æø‡Æö‡Øç‡Æö‡Øà‡Æ§‡Øç "
            "‡Æ§‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æö‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡Æµ‡Æ§‡Æ±‡Øç‡Æï‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ™‡ØÅ‡ÆÆ‡Øç ‡Æé‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øà ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç."
            "\n\n--- ‡Æ§‡Æ©‡Æø‡ÆØ‡ØÅ‡Æ∞‡Æø‡ÆÆ‡Øà‡Æï‡Øç ‡Æï‡Øä‡Æ≥‡Øç‡Æï‡Øà ---\n"
            "1. ‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æö‡Øá‡Æï‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ: ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡ÆÆ‡ØÅ‡Æü‡Æø‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øá ‡Æ®‡Ææ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡Øá‡Æï‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øã‡ÆÆ‡Øç.\n"
            "2. ‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Ææ‡Æü‡ØÅ: ‡Æ™‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡ÆØ‡Øç‡Æµ‡ØÅ ‡Æö‡Øá‡Æµ‡Øà‡ÆØ‡Øà ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Øá‡ÆÆ‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øá ‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ.\n"
            "3. ‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æö‡Øá‡ÆÆ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ: ‡Æé‡Æ≤‡Øç‡Æ≤‡Ææ ‡Æ§‡Æ∞‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æì‡ÆØ‡Øç‡Æµ‡Æø‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æ∞‡Æø‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æï‡ØÅ‡Æ±‡Æø‡ÆØ‡Ææ‡Æï‡Øç‡Æï‡ÆÆ‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ.\n"
            "4. ‡Æ§‡Æ∞‡Æµ‡ØÅ ‡Æ™‡Æï‡Æø‡Æ∞‡Øç‡Æµ‡ØÅ: ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡Æ©‡Æø‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü ‡Æ§‡Æ∞‡Æµ‡Øà ‡Æ®‡Ææ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ®‡Øç‡Æ§ ‡ÆÆ‡ØÇ‡Æ©‡Øç‡Æ±‡Ææ‡ÆÆ‡Øç ‡Æ§‡Æ∞‡Æ™‡Øç‡Æ™‡Æø‡Æ©‡Æ∞‡ØÅ‡Æü‡Æ©‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æï‡Æø‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æµ‡Æ§‡Æø‡Æ≤‡Øç‡Æ≤‡Øà.\n"
            "5. ‡Æ™‡ÆØ‡Æ©‡Æ∞‡Øç ‡Æâ‡Æ∞‡Æø‡ÆÆ‡Øà‡Æï‡Æ≥‡Øç: ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡Æ∞‡Æµ‡Øà ‡Æé‡Æ®‡Øç‡Æ§ ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æ®‡ØÄ‡Æï‡Øç‡Æï‡Æï‡Øç ‡Æï‡Øã‡Æ∞‡Æ≤‡Ææ‡ÆÆ‡Øç."
            "\n\n--- ‡Æö‡Øá‡Æµ‡Øà ‡Æµ‡Æø‡Æ§‡Æø‡ÆÆ‡ØÅ‡Æ±‡Øà‡Æï‡Æ≥‡Øç ---\n"
            "‡Æá‡Æ®‡Øç‡Æ§ ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø‡ÆØ‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ§‡Æ©‡Øç ‡ÆÆ‡ØÇ‡Æ≤‡ÆÆ‡Øç, ‡ÆÆ‡Øá‡Æ≤‡Øá ‡Æâ‡Æ≥‡Øç‡Æ≥ ‡Æ™‡Øä‡Æ±‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ‡Æ§‡Øç ‡Æ§‡ØÅ‡Æ±‡Æ™‡Øç‡Æ™‡Øà ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æí‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Øç‡Æï‡Øä‡Æ≥‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç. "
            "‡Æé‡Æ®‡Øç‡Æ§‡Æµ‡Øä‡Æ∞‡ØÅ ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡Æµ‡Æø‡Æ≥‡Øà‡Æµ‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø ‡Æâ‡Æ∞‡ØÅ‡Æµ‡Ææ‡Æï‡Øç‡Æï‡ØÅ‡Æ®‡Æ∞‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Øä‡Æ±‡ØÅ‡Æ™‡Øç‡Æ™‡Ææ‡Æï‡Øç‡Æï ‡ÆÆ‡Ææ‡Æü‡Øç‡Æü‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ©‡Øç‡Æ±‡ØÅ "
            "‡Æí‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Øç‡Æï‡Øä‡Æ≥‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç. ‡Æá‡Æ®‡Øç‡Æ§ ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø ‡Æ§‡Æï‡ØÅ‡Æ§‡Æø‡Æµ‡Ææ‡ÆØ‡Øç‡Æ®‡Øç‡Æ§ ‡Æ§‡Øã‡Æ≤‡Øç ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Ææ‡Æï ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà. "
            "‡Æá‡Æ®‡Øç‡Æ§ ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø‡ÆØ‡Øà‡Æ™‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡Øä‡Æ®‡Øç‡Æ§ ‡ÆÜ‡Æ™‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ. ‡Æö‡Øá‡Æµ‡Øà‡ÆØ‡Ææ‡Æ©‡Æ§‡ØÅ '‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ™‡Æü‡Æø‡ÆØ‡Øá' "
            "‡Æé‡Æ®‡Øç‡Æ§‡Æµ‡Øä‡Æ∞‡ØÅ ‡Æâ‡Æ§‡Øç‡Æ§‡Æ∞‡Æµ‡Ææ‡Æ§‡ÆÆ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Ææ‡ÆÆ‡Æ≤‡Øç ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ."
        ),
        'dermo_title': '‡Æ§‡Øã‡Æ≤‡Øç ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æü‡ØÅ',
        'dermo_pincode_label': '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æø‡Æ©‡Øç‡Æï‡Øã‡Æü‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç:',
        'dermo_search_btn': '‡Æ§‡Øá‡Æü‡ØÅ',
        'dermo_err_pincode': '‡Æö‡Æ∞‡Æø‡ÆØ‡Ææ‡Æ© 6 ‡Æá‡Æ≤‡Æï‡Øç‡Æï ‡Æ™‡Æø‡Æ©‡Øç‡Æï‡Øã‡Æü‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç.',
        'dermo_results_title': '"{pincode}" ‡ÆÖ‡Æ∞‡ØÅ‡Æï‡Æø‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥ ‡Æï‡Æø‡Æ≥‡Æø‡Æ©‡Æø‡Æï‡Øç‡Æï‡ØÅ‡Æï‡Æ≥‡Øç',
        'dermo_clinic1_name': '‡Æü‡Ææ‡Æï‡Øç‡Æü‡Æ∞‡Øç ‡Æï‡ØÅ‡Æ™‡Øç‡Æ§‡Ææ‡Æµ‡Æø‡Æ©‡Øç ‡Æ§‡Øã‡Æ≤‡Øç ‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡ÆÆ‡Æ©‡Øà',
        'dermo_clinic1_desc': '123, ‡ÆÆ‡ØÜ‡ÆØ‡Æø‡Æ©‡Øç ‡Æ∏‡Øç‡Æü‡Øç‡Æ∞‡ØÄ‡Æü‡Øç - 5 ‡Æï‡Æø‡ÆÆ‡ØÄ ‡Æ§‡Øä‡Æ≤‡Øà‡Æµ‡Æø‡Æ≤‡Øç',
        'dermo_clinic2_name': '‡ÆÖ‡Æï‡Æ∞‡Øç‡Æµ‡Ææ‡Æ≤‡Øç ‡Æü‡ØÜ‡Æ∞‡Øç‡ÆÆ‡Ææ ‡Æï‡Øá‡Æ∞‡Øç',
        'dermo_clinic2_desc': '45, ‡Æ™‡Æ¥‡Øà‡ÆØ ‡Æö‡Ææ‡Æ≤‡Øà - 8 ‡Æï‡Æø‡ÆÆ‡ØÄ ‡Æ§‡Øä‡Æ≤‡Øà‡Æµ‡Æø‡Æ≤‡Øç',
        'dermo_clinic3_name': '‡Æö‡Æ∞‡Øç‡ÆÆ‡Ææ ‡Æ∏‡Øç‡Æï‡Æø‡Æ©‡Øç ‡Æï‡Øá‡Æ∞‡Øç', # New Clinic
        'dermo_clinic3_desc': '78, ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç ‡ÆÖ‡Æµ‡ØÜ‡Æ©‡Øç‡ÆØ‡ØÇ - 10 ‡Æï‡Æø‡ÆÆ‡ØÄ ‡Æ§‡Øä‡Æ≤‡Øà‡Æµ‡Æø‡Æ≤‡Øç', # New Clinic
        'dermo_clinic4_name': '‡Æ®‡Æµ‡ØÄ‡Æ© ‡Æü‡ØÜ‡Æ∞‡Øç‡ÆÆ‡Æü‡Øç‡Æü‡Ææ‡Æ≤‡Æú‡Æø', # New Clinic
        'dermo_clinic4_desc': '‡Æ™‡Æø‡Æ≥‡Ææ‡Æï‡Øç ‡Æö‡Æø, ‡Æü‡ØÜ‡Æï‡Øç ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç - 12 ‡Æï‡Æø‡ÆÆ‡ØÄ ‡Æ§‡Øä‡Æ≤‡Øà‡Æµ‡Æø‡Æ≤‡Øç', # New Clinic
        'view_appt_title': '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Øà‡Æï‡Øç ‡Æï‡Ææ‡Æ£‡Øç‡Æï', # New Screen Title
        'view_appt_name_label': '‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øà ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æø‡Æü‡Æµ‡ØÅ‡ÆÆ‡Øç:', # New Screen Label
        'view_appt_find_btn': '‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø', # New Screen Button
        'view_appt_not_found': '"{name}"‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà.', # New Screen Message
        # Updated to show more details from DB
        'view_appt_found': '{name}‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æö‡Æ®‡Øç‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ:\n‡Æµ‡ÆØ‡Æ§‡ØÅ: {age}\n‡Æ§‡ØÜ‡Ææ‡Æ≤‡Øà‡Æ™‡Øá‡Æö‡Æø: {phone}\n‡Æá‡Æ∞‡Æ§‡Øç‡Æ§ ‡Æµ‡Æï‡Øà: {blood}\n‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ‡Æ∞‡Øç: {doctor}',
    }
}

# Map display names to language keys
LANGUAGE_MAP = {
    'English': 'en',
    '‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)': 'hi',
    '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)': 'ta'
}
# Reverse map for setting the combobox
DISPLAY_MAP = {v: k for k, v in LANGUAGE_MAP.items()}


# ---------------- COLORS AND FONTS ----------------
BG_COLOR = "#f7f0ff"
PURPLE = "#7a42f4"
PURPLE_ACTIVE = "#5a22c4" # Darker purple for button press
GREY = "#f0f0f0"
GREY_ACTIVE = "#e0e0e0"
GREY_TEXT = "#333333"

# --- Add Tamil/Hindi Fonts ---
# Use Nirmala UI as it supports many Indian scripts
FONT_BOLD = ("Segoe UI", 14, "bold")
FONT_NORMAL = ("Segoe UI", 11)
FONT_SEARCH = ("Segoe UI", 16, "bold")
FONT_BTN_LARGE = ("Nirmala UI", 13, "bold") # Use Nirmala for buttons
FONT_BTN_SMALL = ("Nirmala UI", 12, "bold")
FONT_LABEL = ("Nirmala UI", 12, "bold")
FONT_ENTRY = ("Segoe UI", 12)
FONT_TAMIL_HINDI = ("Nirmala UI", 10) # Specific font for disclaimer text


# Handle Pillow/PIL version differences for resizing
try:
    LANCZOS_RESAMPLE = Image.Resampling.LANCZOS
except AttributeError:
    # Fallback for older PIL versions
    LANCZOS_RESAMPLE = Image.LANCZOS

# ---------------- DATABASE CONNECTION ----------------
def create_db_connection():
    """Establishes a connection to the MySQL database."""
    connection = None
    try:
        # --- IMPORTANT: Replace with your actual credentials ---
        connection = mysql.connector.connect(
            host="localhost",       # Or your MySQL server address
            user="root",            # Your MySQL username
            password="SuryaPro@123",          # Your MySQL password (leave empty if none)
            database="yshy_app_db"    # The database name you created
        )
        # print("MySQL Database connection successful") # Uncomment for debugging
    except Error as e:
        # Display connection errors in a messagebox
        lang_key = app.current_lang_key.get() if 'app' in globals() else 'en'
        messagebox.showerror("Database Error", LANGUAGES[lang_key]['db_connection_error'].format(e=e))
        print(f"Error connecting to MySQL Database: {e}") # Keep console log too
    return connection

# ---------------- CUSTOM WIDGETS ----------------

class RoundedButton(tk.Frame):
    """A custom rounded button made with a Canvas."""
    def __init__(self, parent, width, height, radius, text,
                 bg, fg, active_bg, active_fg, font, command, text_key=None):
        
        super().__init__(parent, bg=parent.cget("bg"))
        self.width = width
        self.height = height
        self.radius = radius
        self.text = text
        self.text_key = text_key # --- i18n ---
        self.font = font
        self.bg = bg
        self.fg = fg
        self.active_bg = active_bg
        self.active_fg = active_fg
        self.command = command
        
        self.canvas = tk.Canvas(self, width=width, height=height, bg=parent.cget("bg"),
                                borderwidth=0, highlightthickness=0)
        self.canvas.pack()
        
        # Store text_id to update it later
        self.text_id = self.canvas.create_text(width/2, height/2, text=self.text, fill=self.fg, font=self.font)
        self.draw_button(self.bg, self.fg, initial=True) # Draw initial state
        
        # Bind mouse events
        self.canvas.bind("<Button-1>", self.on_press)
        self.canvas.bind("<ButtonRelease-1>", self.on_release)
        self.canvas.bind("<Enter>", self.on_enter)
        self.canvas.bind("<Leave>", self.on_leave)
    
    def pack(self, *args, **kwargs):
        super().pack(*args, **kwargs)

    def place(self, *args, **kwargs):
        super().place(*args, **kwargs)

    def draw_button(self, btn_bg, text_fg, initial=False):
        self.canvas.delete("all")
        
        r = self.radius
        w = self.width
        h = self.height
        
        self.canvas.create_oval(0, 0, 2*r, 2*r, fill=btn_bg, outline=btn_bg)
        self.canvas.create_oval(w-2*r, 0, w, 2*r, fill=btn_bg, outline=btn_bg)
        self.canvas.create_oval(0, h-2*r, 2*r, h, fill=btn_bg, outline=btn_bg)
        self.canvas.create_oval(w-2*r, h-2*r, w, h, fill=btn_bg, outline=btn_bg)
        self.canvas.create_rectangle(r, 0, w-r, h, fill=btn_bg, outline=btn_bg)
        self.canvas.create_rectangle(0, r, w, h-r, fill=btn_bg, outline=btn_bg)
        
        self.text_id = self.canvas.create_text(w/2, h/2, text=self.text, fill=text_fg, font=self.font)

    # --- i18n: New method to update text ---
    def update_text(self, new_text):
        self.text = new_text
        self.canvas.itemconfig(self.text_id, text=new_text)
    # --- End i18n ---

    def on_press(self, event):
        self.draw_button(self.active_bg, self.active_fg)

    def on_release(self, event):
        self.draw_button(self.bg, self.fg)
        if self.command:
            self.command()

    def on_enter(self, event):
        pass

    def on_leave(self, event):
        self.draw_button(self.bg, self.fg)


class ScrollableFrame(tk.Frame):
    def __init__(self, parent, *args, **kwargs):
        super().__init__(parent, *args, **kwargs)
        self.config(bg=parent.cget("bg"))
        self.canvas = tk.Canvas(self, borderwidth=0, highlightthickness=0, bg=parent.cget("bg"))
        self.scrollbar = ttk.Scrollbar(self, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = tk.Frame(self.canvas, bg=parent.cget("bg"))
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        self.scrollbar.pack(side="right", fill="y")
        self.canvas.pack(side="left", fill="both", expand=True)
        self.canvas_frame = self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.scrollable_frame.bind("<Configure>", self.on_frame_configure)
        self.canvas.bind("<Configure>", self.on_canvas_configure)
        self.bind_all_mousewheel()
        
    def on_frame_configure(self, event):
        self.update_scroll_region()

    def update_scroll_region(self):
        self.canvas.update_idletasks()
        self.scrollable_frame.update_idletasks()
        self.canvas.configure(scrollregion=self.canvas.bbox("all"))

    def on_canvas_configure(self, event):
        self.canvas.itemconfig(self.canvas_frame, width=event.width)

    def on_mousewheel(self, event):
        if event.num == 4: delta = -1
        elif event.num == 5: delta = 1
        else: delta = -int(event.delta / 120)
        self.canvas.yview_scroll(delta, "units")

    def bind_all_mousewheel(self):
        self.bind_all("<MouseWheel>", self.on_mousewheel, add=True)
        self.bind_all("<Button-4>", self.on_mousewheel, add=True)
        self.bind_all("<Button-5>", self.on_mousewheel, add=True)

    def unbind_all_mousewheel(self):
        self.unbind_all("<MouseWheel>")
        self.unbind_all("<Button-4>")
        self.unbind_all("<Button-5>")

    def tkraise(self, *args, **kwargs):
        super().tkraise(*args, **kwargs)
        self.bind_all_mousewheel()
        self.canvas.yview_moveto(0.0)
    
    def lower(self, *args, **kwargs):
        super().lower(*args, **kwargs)
        self.unbind_all_mousewheel()


# --------------- MAIN APP CLASS -------------------
class YshyApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title(LANGUAGES['en']['app_title']) # Set initial title
        self.geometry("420x720")
        self.config(bg=BG_COLOR)
        self.resizable(False, False)
        
        self.frame_history = []
        self.current_image_path = None
        self.temp_image_name = "temp_capture.png" # For camera

        # --- i18n: Language State ---
        self.current_lang_name = tk.StringVar(value='English')
        self.current_lang_key = tk.StringVar(value='en')
        self.current_lang_name.trace_add('write', self.on_language_change)
        # --- End i18n ---

        self.style = ttk.Style(self)
        self.style.theme_use('clam')
        
        self.style.configure('Custom.TCombobox',
                             font=FONT_ENTRY,
                             fieldbackground='white',
                             background='white',
                             foreground='black',
                             arrowcolor=PURPLE,
                             bordercolor=GREY,
                             lightcolor=GREY,
                             darkcolor=GREY,
                             padding=5)
        self.style.map('Custom.TCombobox',
                       fieldbackground=[('readonly', 'white')],
                       selectbackground=[('readonly', 'white')],
                       selectforeground=[('readonly', 'black')])
                       
        self.style.configure('Vertical.TScrollbar',
                             gripcount=0, background=GREY_ACTIVE,
                             darkcolor=GREY, lightcolor=GREY,
                             troughcolor=GREY, bordercolor=GREY,
                             arrowsize=16, arrowcolor=PURPLE)
        self.style.map('Vertical.TScrollbar',
                       background=[('active', PURPLE_ACTIVE), ('!active', GREY_ACTIVE)])

        self.container = tk.Frame(self, bg=BG_COLOR)
        self.container.pack(fill="both", expand=True)

        self.frames = {}
        # --- ADDED DermatologistScreen AND ViewAppointmentScreen ---
        for F in (HomeScreen, SearchScreen, DisclaimerScreen, AppointmentScreen, ScanResultScreen, DermatologistScreen, ViewAppointmentScreen):
            frame = F(self.container, self)
            self.frames[F] = frame
            frame.place(relwidth=1, relheight=1)

        self.show_frame(HomeScreen)

    # --- i18n: Language change handler ---
    def on_language_change(self, *args):
        lang_name = self.current_lang_name.get()
        lang_key = LANGUAGE_MAP.get(lang_name, 'en')
        self.current_lang_key.set(lang_key)
        
        # Update title
        self.title(LANGUAGES[lang_key]['app_title'])

        # Tell all frames to update their text
        for frame in self.frames.values():
            if hasattr(frame, 'update_text'):
                frame.update_text(lang_key)
    # --- End i18n ---

    def show_frame(self, page_class):
        if self.frame_history and page_class == self.frame_history[-1]:
            return
        self.frame_history.append(page_class)
        frame = self.frames[page_class]
        frame.tkraise()

    def go_back(self):
        if len(self.frame_history) > 1:
            self.frame_history.pop()
            prev_page_class = self.frame_history[-1]
            frame = self.frames[prev_page_class]
            frame.tkraise()
            
    # --- Destructor to clean up temp image ---
    def __del__(self):
        # Attempt to remove temp image file if it exists
        try:
            if os.path.exists(self.temp_image_name):
                os.remove(self.temp_image_name)
        except Exception as e:
            print(f"Could not remove temp file {self.temp_image_name}: {e}")



# ---------------- HOME SCREEN ----------------
class HomeScreen(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg=BG_COLOR)
        self.controller = controller

        self.title_label = tk.Label(self, text="Yshy", bg=BG_COLOR, fg="black", font=("Segoe UI", 22, "bold"))
        self.title_label.pack(pady=25)

        self.search_btn = RoundedButton(
            self, width=340, height=60, radius=30,
            text=LANGUAGES['en']['search_btn'], text_key='search_btn',
            bg=GREY, fg=GREY_TEXT, active_bg=GREY_ACTIVE, active_fg=GREY_TEXT, # --- MODIFIED: Made search button greyer ---
            font=FONT_SEARCH,
            command=lambda: controller.show_frame(SearchScreen)
        )
        self.search_btn.pack(pady=(15, 10)) # Reduced padding

        # --- i18n: Language Dropdown ---
        self.lang_menu = ttk.Combobox(
            self,
            textvariable=controller.current_lang_name,
            values=list(LANGUAGE_MAP.keys()),
            style='Custom.TCombobox',
            font=("Nirmala UI", 11),
            state="readonly",
            width=15
        )
        self.lang_menu.pack(pady=(0, 10))
        # --- End i18n ---

        def open_file():
            file_path = filedialog.askopenfilename(
                title="Choose an image",
                filetypes=[("Image Files", "*.jpg;*.jpeg;*.png")]
            )
            if file_path:
                controller.current_image_path = file_path
                controller.show_frame(ScanResultScreen)

        def take_photo():
            # --- CAMERA FEATURE ---
            # We will implement the full logic in Phase 2
            # For now, show a message.
            lang_key = controller.current_lang_key.get()
            messagebox.showinfo("Camera", "Camera feature coming soon!\n‡§ï‡•à‡§Æ‡§∞‡§æ ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à!\n‡Æï‡Øá‡ÆÆ‡Æ∞‡Ææ ‡ÆÖ‡ÆÆ‡Øç‡Æö‡ÆÆ‡Øç ‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡Æø‡Æ≤‡Øç!")
            
            # --- Placeholder logic to proceed ---
            # controller.current_image_path = None
            # controller.show_frame(ScanResultScreen)


        btn_width = 340
        btn_height = 55
        btn_radius = 20
        # --- FIX: Adjusted padding ---
        btn_pady = 10 # Reset padding between buttons

        self.photo_btn = RoundedButton(
            self, width=btn_width, height=btn_height, radius=btn_radius,
            text=LANGUAGES['en']['take_photo_btn'], text_key='take_photo_btn',
            bg=PURPLE, fg="white", active_bg=PURPLE_ACTIVE, active_fg="white",
            font=FONT_BTN_LARGE,
            command=take_photo
        )
        self.photo_btn.pack(pady=btn_pady)
        
        self.gallery_btn = RoundedButton(
            self, width=btn_width, height=btn_height, radius=btn_radius,
            text=LANGUAGES['en']['gallery_btn'], text_key='gallery_btn',
            bg=PURPLE, fg="white", active_bg=PURPLE_ACTIVE, active_fg="white",
            font=FONT_BTN_LARGE,
            command=open_file
        )
        self.gallery_btn.pack(pady=btn_pady)

        # --- REMOVED View Appointment Button ---

        self.privacy_btn = RoundedButton(
            self, width=btn_width, height=btn_height, radius=btn_radius,
            text=LANGUAGES['en']['privacy_btn'], text_key='privacy_btn',
            bg=PURPLE, fg="white", active_bg=PURPLE_ACTIVE, active_fg="white",
            font=FONT_BTN_LARGE,
            command=lambda: controller.show_frame(DisclaimerScreen)
        )
        self.privacy_btn.pack(pady=btn_pady)
        
        self.update_text(controller.current_lang_key.get()) # Set initial text

    # --- i18n: Update text method ---
    def update_text(self, lang_key):
        self.title_label.config(text=LANGUAGES[lang_key]['app_title'])
        self.search_btn.update_text(LANGUAGES[lang_key]['search_btn'])
        self.photo_btn.update_text(LANGUAGES[lang_key]['take_photo_btn'])
        self.gallery_btn.update_text(LANGUAGES[lang_key]['gallery_btn'])
        # self.view_appt_btn removed
        self.privacy_btn.update_text(LANGUAGES[lang_key]['privacy_btn'])
        # Set combobox value from key
        self.controller.current_lang_name.set(DISPLAY_MAP[lang_key])
    # --- End i18n ---


# ---------------- SEARCH SCREEN ----------------
# (Moved View Appointment button here)
class SearchScreen(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg=BG_COLOR)
        
        top_frame = tk.Frame(self, bg=BG_COLOR)
        top_frame.pack(side="top", fill="x", pady=10, padx=10)

        self.back_btn = RoundedButton(
            top_frame, width=80, height=35, radius=15,
            text=LANGUAGES['en']['back_btn'], text_key='back_btn',
            bg=BG_COLOR, fg=PURPLE, active_bg=GREY, active_fg=PURPLE_ACTIVE,
            font=("Segoe UI", 11, "bold"),
            command=lambda: controller.go_back()
        )
        self.back_btn.pack(side="left")

        center_frame = tk.Frame(self, bg=BG_COLOR)
        center_frame.pack(fill="both", expand=True)
        button_wrapper = tk.Frame(center_frame, bg=BG_COLOR)
        button_wrapper.pack(expand=True)

        btn_width = 340
        btn_height = 55
        btn_radius = 20
        # --- Adjusted padding ---
        btn_pady = 12

        self.appointment_btn = RoundedButton(
            button_wrapper, width=btn_width, height=btn_height, radius=btn_radius,
            text=LANGUAGES['en']['create_appointment_btn'], text_key='create_appointment_btn',
            bg=PURPLE, fg="white", active_bg=PURPLE_ACTIVE, active_fg="white",
            font=FONT_BTN_LARGE,
            command=lambda: controller.show_frame(AppointmentScreen)
        )
        self.appointment_btn.pack(pady=btn_pady)

        self.dermatologist_btn = RoundedButton(
            button_wrapper, width=btn_width, height=btn_height, radius=btn_radius,
            text=LANGUAGES['en']['find_dermatologist_btn'], text_key='find_dermatologist_btn',
            bg=PURPLE, fg="white", active_bg=PURPLE_ACTIVE, active_fg="white",
            font=FONT_BTN_LARGE,
            command=lambda: controller.show_frame(DermatologistScreen)
        )
        self.dermatologist_btn.pack(pady=btn_pady)

        # --- ADDED View Appointment Button Here ---
        self.view_appt_btn = RoundedButton(
            button_wrapper, width=btn_width, height=btn_height, radius=btn_radius,
            text=LANGUAGES['en']['view_appointment_btn'], text_key='view_appointment_btn',
            bg=PURPLE, fg="white", active_bg=PURPLE_ACTIVE, active_fg="white",
            font=FONT_BTN_LARGE,
            command=lambda: controller.show_frame(ViewAppointmentScreen)
        )
        self.view_appt_btn.pack(pady=btn_pady)
        # --- END ADDED Button ---
        
    def update_text(self, lang_key):
        self.back_btn.update_text(LANGUAGES[lang_key]['back_btn'])
        self.appointment_btn.update_text(LANGUAGES[lang_key]['create_appointment_btn'])
        self.dermatologist_btn.update_text(LANGUAGES[lang_key]['find_dermatologist_btn'])
        self.view_appt_btn.update_text(LANGUAGES[lang_key]['view_appointment_btn']) # Update new button text


# ---------------- SCAN RESULT SCREEN ----------------
# (No changes needed here)
class ScanResultScreen(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg=BG_COLOR)
        self.controller = controller
        self.image_tk = None

        top_frame = tk.Frame(self, bg=BG_COLOR)
        top_frame.pack(side="top", fill="x", pady=10, padx=10)

        self.back_btn = RoundedButton(
            top_frame, width=80, height=35, radius=15,
            text=LANGUAGES['en']['back_btn'], text_key='back_btn',
            bg=BG_COLOR, fg=PURPLE, active_bg=GREY, active_fg=PURPLE_ACTIVE,
            font=("Segoe UI", 11, "bold"),
            command=lambda: controller.go_back()
        )
        self.back_btn.pack(side="left")

        self.scroll_frame = ScrollableFrame(self)
        self.scroll_frame.pack(fill="both", expand=True)
        content = self.scroll_frame.scrollable_frame

        self.scan_title_label = tk.Label(content, text=LANGUAGES['en']['scan_title'], bg=BG_COLOR, fg="black", font=("Nirmala UI", 16, "bold"))
        self.scan_title_label.pack(pady=(10, 10))
        self.scan_confidence_label = tk.Label(content, text=LANGUAGES['en']['scan_confidence'], bg=BG_COLOR, fg="gray", font=("Segoe UI", 12))
        self.scan_confidence_label.pack(pady=5)

        self.image_canvas = tk.Canvas(content, width=300, height=180, bg="#d9c6ff", highlightthickness=0)
        self.image_canvas_text = self.image_canvas.create_text(150, 90, text=LANGUAGES['en']['scan_image_placeholder'], fill="black", font=("Segoe UI", 12))
        self.image_canvas.pack(pady=10)

        self.scan_disclaimer_label = tk.Label(
            content, text=LANGUAGES['en']['scan_disclaimer'], bg=BG_COLOR,
            wraplength=350, justify="center", fg="black", font=FONT_TAMIL_HINDI
        )
        self.scan_disclaimer_label.pack(pady=5)

        self.treatment_title_label = tk.Label(content, text=LANGUAGES['en']['scan_treatment_title'], bg=BG_COLOR, fg="black", font=FONT_BOLD)
        self.treatment_body_label = tk.Label(content, text=LANGUAGES['en']['scan_treatment_body'], bg=BG_COLOR, fg="black", justify="left", font=FONT_NORMAL, wraplength=340)
        self.section(self.treatment_title_label, self.treatment_body_label)

        self.food_title_label = tk.Label(content, text=LANGUAGES['en']['scan_food_title'], bg=BG_COLOR, fg="black", font=FONT_BOLD)
        self.food_body_label = tk.Label(content, text=LANGUAGES['en']['scan_food_body'], bg=BG_COLOR, fg="black", justify="left", font=FONT_NORMAL, wraplength=340)
        self.section(self.food_title_label, self.food_body_label)

        self.otc_title_label = tk.Label(content, text=LANGUAGES['en']['scan_otc_title'], bg=BG_COLOR, fg="black", font=FONT_BOLD)
        self.otc_body_label = tk.Label(content, text=LANGUAGES['en']['scan_otc_body'], bg=BG_COLOR, fg="black", justify="left", font=FONT_NORMAL, wraplength=340)
        self.section(self.otc_title_label, self.otc_body_label)
        
        btn_frame = tk.Frame(content, bg=BG_COLOR)
        btn_frame.pack(pady=25)
        
        btn_width = 340
        btn_height = 55
        btn_radius = 20

        self.appointment_btn = RoundedButton(
            btn_frame, width=btn_width, height=btn_height, radius=btn_radius,
            text=LANGUAGES['en']['create_appointment_btn'], text_key='create_appointment_btn',
            bg=PURPLE, fg="white", active_bg=PURPLE_ACTIVE, active_fg="white",
            font=FONT_BTN_LARGE,
            command=lambda: controller.show_frame(AppointmentScreen)
        )
        self.appointment_btn.pack(pady=15)

        self.dermatologist_btn = RoundedButton(
            btn_frame, width=btn_width, height=btn_height, radius=btn_radius,
            text=LANGUAGES['en']['find_dermatologist_btn'], text_key='find_dermatologist_btn',
            bg=PURPLE, fg="white", active_bg=PURPLE_ACTIVE, active_fg="white",
            font=FONT_BTN_LARGE,
            command=lambda: controller.show_frame(DermatologistScreen)
        )
        self.dermatologist_btn.pack(pady=15)
        
        tk.Frame(content, height=20, bg=BG_COLOR).pack()

    def section(self, title_label, body_label):
        title_label.pack(anchor="w", padx=20, pady=5)
        body_label.pack(anchor="w", padx=35)

    def load_image(self):
        file_path = self.controller.current_image_path
        lang_key = self.controller.current_lang_key.get()
        self.image_canvas.delete("all")
        
        if file_path:
            try:
                image = Image.open(file_path)
                image.thumbnail((300, 180), LANCZOS_RESAMPLE)
                self.image_tk = ImageTk.PhotoImage(image)
                self.image_canvas.create_image(150, 90, anchor="center", image=self.image_tk)
            except Exception as e:
                print(f"Error loading image: {e}")
                self.image_canvas_text = self.image_canvas.create_text(150, 90, text=LANGUAGES[lang_key]['scan_image_error'], fill="red", font=("Segoe UI", 12))
        else:
             # Need to recreate the text item if it was deleted
             self.image_canvas_text = self.image_canvas.create_text(150, 90, text=LANGUAGES[lang_key]['scan_image_placeholder'], fill="black", font=("Segoe UI", 12))


    def tkraise(self, *args, **kwargs):
        super().tkraise(*args, **kwargs)
        self.update_text(self.controller.current_lang_key.get()) # Update text first
        self.load_image() # Then load image
        self.controller.update_idletasks()
        self.scroll_frame.update_scroll_region()

    def update_text(self, lang_key):
        self.back_btn.update_text(LANGUAGES[lang_key]['back_btn'])
        self.scan_title_label.config(text=LANGUAGES[lang_key]['scan_title'])
        self.scan_confidence_label.config(text=LANGUAGES[lang_key]['scan_confidence'])
        self.scan_disclaimer_label.config(text=LANGUAGES[lang_key]['scan_disclaimer'])
        
        # Update canvas text placeholder (load_image handles actual image text logic)
        try:
            # Check if self.image_canvas_text exists and is valid
            if self.image_canvas.type(self.image_canvas_text) == 'text':
                 self.image_canvas.itemconfig(self.image_canvas_text, text=LANGUAGES[lang_key]['scan_image_placeholder'])
            else: # If not valid text item (maybe image shown), recreate text
                 self.image_canvas_text = self.image_canvas.create_text(150, 90, text=LANGUAGES[lang_key]['scan_image_placeholder'], fill="black", font=("Segoe UI", 12))
                 # Immediately hide it if an image should be there
                 if self.controller.current_image_path:
                     self.image_canvas.itemconfig(self.image_canvas_text, state='hidden')

        except tk.TclError: # If item doesn't exist at all
             self.image_canvas_text = self.image_canvas.create_text(150, 90, text=LANGUAGES[lang_key]['scan_image_placeholder'], fill="black", font=("Segoe UI", 12))
             if self.controller.current_image_path:
                 self.image_canvas.itemconfig(self.image_canvas_text, state='hidden')

        self.treatment_title_label.config(text=LANGUAGES[lang_key]['scan_treatment_title'])
        self.treatment_body_label.config(text=LANGUAGES[lang_key]['scan_treatment_body'])
        self.food_title_label.config(text=LANGUAGES[lang_key]['scan_food_title'])
        self.food_body_label.config(text=LANGUAGES[lang_key]['scan_food_body'])
        self.otc_title_label.config(text=LANGUAGES[lang_key]['scan_otc_title'])
        self.otc_body_label.config(text=LANGUAGES[lang_key]['scan_otc_body'])
        
        self.appointment_btn.update_text(LANGUAGES[lang_key]['create_appointment_btn'])
        self.dermatologist_btn.update_text(LANGUAGES[lang_key]['find_dermatologist_btn'])


# ---------------- APPOINTMENT SCREEN ----------------
# (Modified submit_report for DB insert)
class AppointmentScreen(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg=BG_COLOR)
        
        self.controller = controller
        # self.report_data removed, no longer needed

        top_frame = tk.Frame(self, bg=BG_COLOR)
        top_frame.pack(side="top", fill="x", pady=10, padx=10)

        self.back_btn = RoundedButton(
            top_frame, width=80, height=35, radius=15,
            text=LANGUAGES['en']['back_btn'], text_key='back_btn',
            bg=BG_COLOR, fg=PURPLE, active_bg=GREY, active_fg=PURPLE_ACTIVE,
            font=("Segoe UI", 11, "bold"),
            command=lambda: [controller.go_back(), self.reset_form()]
        )
        self.back_btn.pack(side="left")

        self.title_label = tk.Label(self, text=LANGUAGES['en']['appointment_title'], bg=BG_COLOR, fg="black", font=("Nirmala UI", 18, "bold"))
        self.title_label.pack(pady=(10, 20))

        form_frame = tk.Frame(self, bg=BG_COLOR)
        form_frame.pack(pady=10, padx=40)

        entry_width = 25
        entry_font = FONT_ENTRY
        label_font = FONT_LABEL

        self.name_label = tk.Label(form_frame, text=LANGUAGES['en']['form_name'], font=label_font, bg=BG_COLOR)
        self.name_label.grid(row=0, column=0, sticky="w", pady=5)
        self.name_entry = tk.Entry(form_frame, width=entry_width, font=entry_font, relief="flat")
        self.name_entry.grid(row=0, column=1, pady=5, ipady=4)

        self.age_label = tk.Label(form_frame, text=LANGUAGES['en']['form_age'], font=label_font, bg=BG_COLOR)
        self.age_label.grid(row=1, column=0, sticky="w", pady=5)
        self.age_entry = tk.Entry(form_frame, width=entry_width, font=entry_font, relief="flat")
        self.age_entry.grid(row=1, column=1, pady=5, ipady=4)

        self.phone_label = tk.Label(form_frame, text=LANGUAGES['en']['form_phone'], font=label_font, bg=BG_COLOR)
        self.phone_label.grid(row=2, column=0, sticky="w", pady=5)
        self.phone_entry = tk.Entry(form_frame, width=entry_width, font=entry_font, relief="flat")
        self.phone_entry.grid(row=2, column=1, pady=5, ipady=4)

        self.blood_label = tk.Label(form_frame, text=LANGUAGES['en']['form_blood'], font=label_font, bg=BG_COLOR)
        self.blood_label.grid(row=3, column=0, sticky="w", pady=5)
        self.blood_group_var = tk.StringVar()
        blood_groups = ["O+", "O-", "A+", "A-", "B+", "B-", "AB+", "AB-"]
        self.blood_group_menu = ttk.Combobox(form_frame, textvariable=self.blood_group_var,
                                             values=blood_groups, width=entry_width-2,
                                             font=entry_font, style='Custom.TCombobox',
                                             state="readonly")
        self.blood_group_menu.grid(row=3, column=1, pady=5, ipady=1)

        self.doctor_label = tk.Label(form_frame, text=LANGUAGES['en']['form_doctor'], font=label_font, bg=BG_COLOR)
        self.doctor_label.grid(row=4, column=0, sticky="w", pady=5)
        self.doctor_var = tk.StringVar()
        self.doctors = ["Dr Tiwari", "Dr Goyal"] # Store for i18n
        self.doctor_menu = ttk.Combobox(form_frame, textvariable=self.doctor_var,
                                        values=self.doctors, width=entry_width-2,
                                        font=entry_font, style='Custom.TCombobox',
                                        state="readonly")
        self.doctor_menu.grid(row=4, column=1, pady=5, ipady=1)

        self.success_label = tk.Label(self, text=LANGUAGES['en']['form_success_msg'], bg=BG_COLOR, fg="green", font=("Segoe UI", 12, "bold"))
        
        self.submit_btn = RoundedButton(
            self, width=300, height=50, radius=20,
            text=LANGUAGES['en']['form_submit_btn'], text_key='form_submit_btn',
            bg=PURPLE, fg="white", active_bg=PURPLE_ACTIVE, active_fg="white",
            font=FONT_BTN_LARGE,
            command=self.submit_report
        )
        self.submit_btn.pack(pady=20)

        # Print button removed as we save to DB now

    # --- MODIFIED: submit_report saves to MySQL ---
    def submit_report(self):
        lang_key = self.controller.current_lang_key.get()
        name = self.name_entry.get().strip()
        age_str = self.age_entry.get().strip()
        phone = self.phone_entry.get().strip()
        blood = self.blood_group_var.get()
        doc = self.doctor_var.get()

        # --- Validate Data ---
        if not all([name, age_str, phone, blood, doc]):
            messagebox.showerror("Error", LANGUAGES[lang_key]['form_err_all_fields'])
            return
        try:
            age = int(age_str) # Convert age to integer
        except ValueError:
            messagebox.showerror("Error", LANGUAGES[lang_key]['form_err_age_number'])
            return
        if not phone.isdigit() or len(phone) < 7:
            messagebox.showerror("Error", LANGUAGES[lang_key]['form_err_phone_invalid'])
            return

        # --- Database Interaction ---
        connection = create_db_connection()
        if connection is None:
            return # Error handled in create_db_connection

        cursor = connection.cursor()
        query = """
            INSERT INTO appointments (name, age, phone, blood_group, doctor)
            VALUES (%s, %s, %s, %s, %s)
        """
        try:
            cursor.execute(query, (name, age, phone, blood, doc))
            connection.commit()
            print("Appointment inserted successfully") # For debugging

            # --- Update UI ---
            self.submit_btn.pack_forget()       # Hide submit button
            self.success_label.pack(pady=15)     # Show success message
            messagebox.showinfo(LANGUAGES[lang_key]['form_success_title'], LANGUAGES[lang_key]['form_success_body'])

        except Error as e:
            print(f"Error inserting appointment: {e}")
            messagebox.showerror("Database Error", LANGUAGES[lang_key]['db_insert_error'].format(e=e))
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()
                # print("MySQL connection is closed") # For debugging

    # Print report function removed

    def reset_form(self):
        """Resets the form to its initial state."""
        self.name_entry.delete(0, 'end')
        self.age_entry.delete(0, 'end')
        self.phone_entry.delete(0, 'end')
        self.blood_group_var.set("")
        self.doctor_var.set("")
        
        self.success_label.pack_forget()
        # self.print_btn removed
        self.submit_btn.pack(pady=20) # Ensure submit button is visible again
        # self.report_data removed

    def update_text(self, lang_key):
        self.back_btn.update_text(LANGUAGES[lang_key]['back_btn'])
        self.title_label.config(text=LANGUAGES[lang_key]['appointment_title'])
        self.name_label.config(text=LANGUAGES[lang_key]['form_name'])
        self.age_label.config(text=LANGUAGES[lang_key]['form_age'])
        self.phone_label.config(text=LANGUAGES[lang_key]['form_phone'])
        self.blood_label.config(text=LANGUAGES[lang_key]['form_blood'])
        self.doctor_label.config(text=LANGUAGES[lang_key]['form_doctor'])
        # Note: Doctor names and blood groups are not translated, which is standard.
        self.submit_btn.update_text(LANGUAGES[lang_key]['form_submit_btn'])
        # self.print_btn removed
        self.success_label.config(text=LANGUAGES[lang_key]['form_success_msg'])


# ---------------- DISCLAIMER SCREEN ----------------
# (No changes needed here)
class DisclaimerScreen(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg=BG_COLOR)
        self.controller = controller

        top_frame = tk.Frame(self, bg=BG_COLOR)
        top_frame.pack(side="top", fill="x", pady=10, padx=10)

        self.back_btn = RoundedButton(
            top_frame, width=80, height=35, radius=15,
            text=LANGUAGES['en']['back_btn'], text_key='back_btn',
            bg=BG_COLOR, fg=PURPLE, active_bg=GREY, active_fg=PURPLE_ACTIVE,
            font=("Segoe UI", 11, "bold"),
            command=lambda: controller.go_back()
        )
        self.back_btn.pack(side="left")

        self.title_label = tk.Label(self, text=LANGUAGES['en']['disclaimer_title'], bg=BG_COLOR, fg="red", font=("Nirmala UI", 16, "bold"))
        self.title_label.pack(pady=(10, 15))

        self.scroll_frame = ScrollableFrame(self)
        self.scroll_frame.pack(padx=20, pady=5, fill="both", expand=True)
        content = self.scroll_frame.scrollable_frame

        self.text_label = tk.Label(content, text=LANGUAGES['en']['disclaimer_body'], bg=BG_COLOR, fg="black",
                                     font=FONT_TAMIL_HINDI, wraplength=340, justify="left")
        self.text_label.pack(fill="both", expand=True, padx=5)

    def tkraise(self, *args, **kwargs):
        super().tkraise(*args, **kwargs)
        self.controller.update_idletasks()
        self.scroll_frame.update_scroll_region()
        self.update_text(self.controller.current_lang_key.get()) # Update text on raise

    def update_text(self, lang_key):
        self.back_btn.update_text(LANGUAGES[lang_key]['back_btn'])
        self.title_label.config(text=LANGUAGES[lang_key]['disclaimer_title'])
        self.text_label.config(text=LANGUAGES[lang_key]['disclaimer_body'])
    
    
# ---------------- DERMATOLOGIST SCREEN ----------------
# (No changes needed here)
class DermatologistScreen(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg=BG_COLOR)
        self.controller = controller

        top_frame = tk.Frame(self, bg=BG_COLOR)
        top_frame.pack(side="top", fill="x", pady=10, padx=10)

        self.back_btn = RoundedButton(
            top_frame, width=80, height=35, radius=15,
            text=LANGUAGES['en']['back_btn'], text_key='back_btn',
            bg=BG_COLOR, fg=PURPLE, active_bg=GREY, active_fg=PURPLE_ACTIVE,
            font=("Segoe UI", 11, "bold"),
            command=lambda: controller.go_back()
        )
        self.back_btn.pack(side="left")

        self.title_label = tk.Label(self, text=LANGUAGES['en']['dermo_title'], bg=BG_COLOR, fg="black", font=("Nirmala UI", 18, "bold"))
        self.title_label.pack(pady=(10, 20))

        # --- Search Bar ---
        search_frame = tk.Frame(self, bg=BG_COLOR)
        search_frame.pack(pady=10, padx=30)
        
        self.pincode_label = tk.Label(search_frame, text=LANGUAGES['en']['dermo_pincode_label'], font=FONT_LABEL, bg=BG_COLOR)
        self.pincode_label.pack(pady=(0, 5))
        
        self.pincode_entry = tk.Entry(search_frame, width=15, font=FONT_ENTRY, relief="flat")
        self.pincode_entry.pack(pady=5, ipady=4)
        
        self.search_btn = RoundedButton(
            search_frame, width=120, height=40, radius=15,
            text=LANGUAGES['en']['dermo_search_btn'], text_key='dermo_search_btn',
            bg=PURPLE, fg="white", active_bg=PURPLE_ACTIVE, active_fg="white",
            font=FONT_BTN_SMALL,
            command=self.find_clinics
        )
        self.search_btn.pack(pady=10)

        # --- Results Area ---
        self.scroll_frame = ScrollableFrame(self)
        self.scroll_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        self.results_frame = self.scroll_frame.scrollable_frame
        
        self.results_title = tk.Label(self.results_frame, text="", bg=BG_COLOR, font=FONT_BOLD)
        self.results_title.pack(pady=5)
        

    def find_clinics(self):
        # Clear previous results
        for widget in self.results_frame.winfo_children():
            if widget != self.results_title: # Don't destroy the title
                widget.destroy()
        
        lang_key = self.controller.current_lang_key.get()
        pincode = self.pincode_entry.get()
        
        # Validate pincode
        if not (pincode.isdigit() and len(pincode) == 6):
            self.results_title.config(text=LANGUAGES[lang_key]['dermo_err_pincode'], fg="red")
            return
            
        self.results_title.config(text=LANGUAGES[lang_key]['dermo_results_title'].format(pincode=pincode), fg="black")

        # --- FAKE MOCK DATA ---
        clinics = [
            {'key_name': 'dermo_clinic1_name', 'key_desc': 'dermo_clinic1_desc'},
            {'key_name': 'dermo_clinic2_name', 'key_desc': 'dermo_clinic2_desc'},
            {'key_name': 'dermo_clinic3_name', 'key_desc': 'dermo_clinic3_desc'},
            {'key_name': 'dermo_clinic4_name', 'key_desc': 'dermo_clinic4_desc'},
        ]
        
        for clinic in clinics:
            frame = tk.Frame(self.results_frame, bg=GREY, borderwidth=1, relief="solid")
            
            name = LANGUAGES[lang_key][clinic['key_name']]
            desc = LANGUAGES[lang_key][clinic['key_desc']]
            
            tk.Label(frame, text=name, font=FONT_LABEL, bg=GREY, justify="left").pack(anchor="w", padx=10, pady=(10, 0))
            tk.Label(frame, text=desc, font=FONT_NORMAL, bg=GREY, justify="left").pack(anchor="w", padx=10, pady=(0, 10))
            
            frame.pack(fill="x", pady=5, padx=10)
            
        self.scroll_frame.update_scroll_region() # IMPORTANT


    def tkraise(self, *args, **kwargs):
        super().tkraise(*args, **kwargs)
        self.controller.update_idletasks()
        self.scroll_frame.update_scroll_region()
        self.update_text(self.controller.current_lang_key.get()) # Update text on raise

    def update_text(self, lang_key):
        self.back_btn.update_text(LANGUAGES[lang_key]['back_btn'])
        self.title_label.config(text=LANGUAGES[lang_key]['dermo_title'])
        self.pincode_label.config(text=LANGUAGES[lang_key]['dermo_pincode_label'])
        self.search_btn.update_text(LANGUAGES[lang_key]['dermo_search_btn'])
        
        # Clear results on language change
        for widget in self.results_frame.winfo_children():
            widget.destroy()
        self.results_title = tk.Label(self.results_frame, text="", bg=BG_COLOR, font=FONT_BOLD)
        self.results_title.pack(pady=5)
        self.pincode_entry.delete(0, 'end')


# --- VIEW APPOINTMENT SCREEN ---
# (Modified find_appointment for DB query)
class ViewAppointmentScreen(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent, bg=BG_COLOR)
        self.controller = controller

        top_frame = tk.Frame(self, bg=BG_COLOR)
        top_frame.pack(side="top", fill="x", pady=10, padx=10)

        self.back_btn = RoundedButton(
            top_frame, width=80, height=35, radius=15,
            text=LANGUAGES['en']['back_btn'], text_key='back_btn',
            bg=BG_COLOR, fg=PURPLE, active_bg=GREY, active_fg=PURPLE_ACTIVE,
            font=("Segoe UI", 11, "bold"),
            command=lambda: controller.go_back()
        )
        self.back_btn.pack(side="left")

        self.title_label = tk.Label(self, text=LANGUAGES['en']['view_appt_title'], bg=BG_COLOR, fg="black", font=("Nirmala UI", 18, "bold"))
        self.title_label.pack(pady=(10, 20))

        # --- Input Section ---
        input_frame = tk.Frame(self, bg=BG_COLOR)
        input_frame.pack(pady=10, padx=30)

        self.name_label = tk.Label(input_frame, text=LANGUAGES['en']['view_appt_name_label'], font=FONT_LABEL, bg=BG_COLOR)
        self.name_label.pack(pady=5)

        self.name_entry = tk.Entry(input_frame, width=25, font=FONT_ENTRY, relief="flat")
        self.name_entry.pack(pady=5, ipady=4)

        self.find_btn = RoundedButton(
            input_frame, width=200, height=45, radius=15,
            text=LANGUAGES['en']['view_appt_find_btn'], text_key='view_appt_find_btn',
            bg=PURPLE, fg="white", active_bg=PURPLE_ACTIVE, active_fg="white",
            font=FONT_BTN_LARGE,
            command=self.find_appointment
        )
        self.find_btn.pack(pady=15)

        # --- Results Area ---
        self.results_label = tk.Label(self, text="", bg=BG_COLOR, font=FONT_NORMAL, justify="left", wraplength=350)
        self.results_label.pack(pady=10, padx=30, fill="x")

    # --- MODIFIED: find_appointment queries MySQL ---
    def find_appointment(self):
        lang_key = self.controller.current_lang_key.get()
        name_to_find = self.name_entry.get().strip()

        if not name_to_find:
            self.results_label.config(text=LANGUAGES[lang_key]['view_appt_name_label'], fg='red')
            return

        # --- Database Interaction ---
        connection = create_db_connection()
        if connection is None:
            return

        cursor = connection.cursor()
        # Find the most recent appointment for that name
        query = "SELECT age, phone, blood_group, doctor FROM appointments WHERE name = %s ORDER BY submission_time DESC LIMIT 1"

        try:
            cursor.execute(query, (name_to_find,))
            result = cursor.fetchone() # Get the first result

            if result:
                # result = (age, phone, blood_group, doctor)
                result_text = LANGUAGES[lang_key]['view_appt_found'].format(
                    name=name_to_find,
                    age=result[0],
                    phone=result[1],
                    blood=result[2],
                    doctor=result[3]
                )
                self.results_label.config(text=result_text, fg='black')
            else:
                result_text = LANGUAGES[lang_key]['view_appt_not_found'].format(name=name_to_find)
                self.results_label.config(text=result_text, fg='red')

        except Error as e:
            print(f"Error querying appointment: {e}")
            messagebox.showerror("Database Error", LANGUAGES[lang_key]['db_query_error'].format(e=e))
            self.results_label.config(text=LANGUAGES[lang_key]['db_query_error'].format(e="Error"), fg='red')
        finally:
            if connection.is_connected():
                cursor.close()
                connection.close()


    def tkraise(self, *args, **kwargs):
        super().tkraise(*args, **kwargs)
        self.update_text(self.controller.current_lang_key.get()) # Update text on raise
        self.name_entry.delete(0, 'end') # Clear entry on raise
        self.results_label.config(text="") # Clear results on raise


    def update_text(self, lang_key):
        self.back_btn.update_text(LANGUAGES[lang_key]['back_btn'])
        self.title_label.config(text=LANGUAGES[lang_key]['view_appt_title'])
        self.name_label.config(text=LANGUAGES[lang_key]['view_appt_name_label'])
        self.find_btn.update_text(LANGUAGES[lang_key]['view_appt_find_btn'])
        # Clear results label text when language changes
        self.results_label.config(text="")


# ---------------- RUN APP ----------------
# --- Add app to global scope for error handling in create_db_connection ---
if __name__ == "__main__":
    app = YshyApp()
    app.mainloop()